var documenterSearchIndex = {"docs":
[{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"EditURL = \"https://github.com/hexaeder/EMTSim.jl/blob/main/examples/slack_load.jl\"","category":"page"},{"location":"generated/slack_load/#Disconnect-load-from-slack","page":"slack_load","title":"Disconnect load from slack","text":"","category":"section"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"In this example, we examine the voltage transient of the system after a single load of constant P is isconnected from a slack.","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"using EMTSim\nusing BlockSystems\nusing ModelingToolkit\nusing NetworkDynamics\nusing Graphs\nusing OrdinaryDiffEq\nusing DiffEqCallbacks\nusing SteadyStateDiffEq\nusing Plots\nusing Unitful\nusing CSV\nusing DataFrames","category":"page"},{"location":"generated/slack_load/#Constants-and-unit-stuff.","page":"slack_load","title":"Constants and unit stuff.","text":"","category":"section"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"ω0    = 2π*50u\"rad/s\"\nSbase = 300u\"MW\"\nVbase = 110u\"kV\" #* sqrt(2/3)\nIbase = Sbase/(Vbase )#* √3) # why the √3 ?\nCbase = Ibase/Vbase\nLbase = Vbase/Ibase\nRbase = (Vbase^2)/Sbase\n\nRline = 1u\"Ω\" / Rbase           |> u\"pu\"\nPload = -300u\"MW\" / Sbase       |> u\"pu\"\nRload = (1u\"pu\")^2 / Pload      |> u\"pu\" # R=U^2/P\nCline = (2e-6)u\"F\" / Cbase      |> u\"s\"\nLline = (1/100π)u\"H\" / Lbase    |> u\"s\"\n\nnothing#hide","category":"page"},{"location":"generated/slack_load/#Slack-Bus","page":"slack_load","title":"Slack Bus","text":"","category":"section"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"The slack bus is modelld as a node with dot(u) = 0, i'll keep the initial voltage forever.","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"@variables t u_d(t) u_q(t)\ndt = Differential(t)\n\nslackblock = IOBlock([dt(u_d) ~ 0, dt(u_q) ~ 0], [], [u_d, u_q]; name=:slack)","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"create ODE Vertex from this block","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"slack = ODEVertex(slackblock)\nnothing#hide","category":"page"},{"location":"generated/slack_load/#Constant-R-Load","page":"slack_load","title":"Constant R Load","text":"","category":"section"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"I tried to model an constan R load first using the algebraic current equation","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"i = -frac 1 R  u","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"This however, did not match the powerfactory results. The power factory load is purely ohmic (no phase shift) but constant in P. Since the voltage on bus 2 is slighly below 1 pu, we can not trivially calculate the corresponding resistance.","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"@variables t i_d(t) i_q(t)\n@parameters u_d(t) u_q(t) R\nloadblock = IOBlock([i_d ~ -1/R * u_d,\n                     i_q ~ -1/R * u_q],\n                    [u_d, u_q], [i_d, i_q],\n                    name=:load)\n\n# The load is used as a current source in a `BusBar`\nbusblock = BusBar(loadblock; name=:loadbus)\nbusblock = set_p(busblock, Dict(:C=>ustrip(u\"s\", Cline), :ω0=>ustrip(u\"rad/s\", ω0)))\n\n# The `BusBar` block can be used to create an ODE Vertex\nload = ODEVertex(busblock, [:load₊R])","category":"page"},{"location":"generated/slack_load/#Constant-P-Load","page":"slack_load","title":"Constant P Load","text":"","category":"section"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"For a constant load P we may use the algebric current equation","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"i_d = P fracu_du_d^2 + u_q^2\ni_q = P fracu_qu_d^2 + u_q^2","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"However, this leads to instability in the model and is hard to initialize. I guess it is not a good idea to follow each oszillation in node/condensator voltage!","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"To circumvent the problem, we model the P load using a lowpass filter","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"doti_d = frac1tauleft(P fracu_du_d^2 + u_q^2 - i_dright)\ndoti_q = frac1tauleft(P fracu_qu_d^2 + u_q^2 - i_qright)","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"whose time constant tau = frac1omega_0 is chosen in a way, that disturbances higher than the nominal grid frequency are damped.","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"@variables t i_d(t) i_q(t)\n@parameters u_d(t) u_q(t) P τ\nloadblock = IOBlock([dt(i_d) ~ ustrip(u\"rad/s\", ω0)*(P * u_d/(u_d^2 + u_q^2) - i_d),\n                     dt(i_q) ~ ustrip(u\"rad/s\", ω0)*(P * u_q/(u_d^2 + u_q^2) - i_q)],\n                    [u_d, u_q], [i_d, i_q],\n                    name=:load)","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"The load is used as a current source in a BusBar","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"busblock = BusBar(loadblock; name=:loadbus)\nbusblock = set_p(busblock, Dict(:C=>ustrip(u\"s\", Cline), :ω0=>ustrip(u\"rad/s\", ω0)))","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"The BusBar block can be used to create an ODE Vertex","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"load = ODEVertex(busblock, [:load₊P])\n\nnothing#hide","category":"page"},{"location":"generated/slack_load/#ODE-edge-for-the-RL-Line","page":"slack_load","title":"ODE edge for the RL Line","text":"","category":"section"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"@variables t i_d(t) i_q(t)\n@parameters u_d_src(t) u_q_src(t) u_d_dst(t) u_q_dst(t) R L ω\n\nlineblock = IOBlock([dt(i_d) ~  ω * i_q  - R/L * i_d + 1/L*(u_d_src - u_d_dst),\n                     dt(i_q) ~ -ω * i_d  - R/L * i_q + 1/L*(u_q_src - u_q_dst)],\n                    [u_d_src, u_q_src, u_d_dst, u_q_dst],\n                    [i_d, i_q],\n                    name=:RLLine)\nlineblock = set_p(lineblock, Dict(:R=>NoUnits(Rline), :L=>ustrip(u\"s\", Lline), :ω=>ustrip(u\"rad/s\", ω0)))","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"This block can be used to create an ODEEdge","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"edge = ODEEdge(lineblock)\n\nnothing#hide","category":"page"},{"location":"generated/slack_load/#Set-up-the-network","page":"slack_load","title":"Set up the network","text":"","category":"section"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"g = SimpleGraph(2)\nadd_edge!(g, 1, 2)\nnd = network_dynamics([slack, load], edge, g)\n\nnothing#hide","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"We use SteadyStateDiffeq to find the steady state based on an initial guess. The initial guess just contains voltage at both nodes. The load value is given as a parameter to node 2.","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"uguess = zeros(length(nd.syms))\nuguess[[1,3]] .= 1.0 # set the d component of the slack to 1 from the beginning\np = ([0, NoUnits(Pload)], nothing)\nssprob = SteadyStateProblem(nd, uguess, p)\nu0 = solve(ssprob, DynamicSS(AutoTsit5(Rosenbrock23())))\n\nnothing#hide","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"Let's ignore this warning for now. I am not sure why the steady state is not completly steady. it nearly is.","category":"page"},{"location":"generated/slack_load/#Simulation","page":"slack_load","title":"Simulation","text":"","category":"section"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"We simulate a disconnection of the load at t=0.1 s. This is done using a callback. The callback does 2 things: it sets the reference point P to zero, it sets the currents flowing through the load to zero.","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"tspan = (0.0, 0.124)\naffect = function (integrator)\n    integrator.p = ([0, 0.0], nothing)\n    integrator.u[[5,6]] .= 0.0\nend\ncb = PresetTimeCallback(0.1, affect)\nprob = ODEProblem(nd, u0, tspan, p; callback=cb)\nsol = solve(prob, Tsit5(),dtmax=0.00001)\nnothing #hide","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"We may now transformation the results back to a,b,c frame","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"a,b,c = Tdqinv(sol.t, sol[3,:], sol[4,:])\nnothing#hide","category":"page"},{"location":"generated/slack_load/#Comparison-with-power-factory-results","page":"slack_load","title":"Comparison with power factory results","text":"","category":"section"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"Read the Power Facory data and plot for reference","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"V_base is RMS phase-phase voltage.","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"V_star = frac1sqrt3 *  V_base\nhatV = sqrtfrac23 * V_base","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"Therefore, i have to multiply the a, b and c results by sqrt(3/2)","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"df = CSV.read(joinpath(dirname(pathof(EMTSim)), \"..\", \"data\",\"PowerFactory\", \"Test_EMT.csv\"), DataFrame, skipto=3,\n              header=[:t, :u_1_a, :u_1_b, :u_1_c, :u_2_a, :u_2_b, :u_2_c])\n\nxlims = (0.099,0.124)\nplot(df.t, df.u_2_a; label=\"PowerFactory A\", xlims, color=:lightgray,  linewidth=5)\nplot!(sol.t, a.*sqrt(3/2); label=\"u_2_a\", xlims)\n\nplot!(df.t, df.u_2_b; label=\"PowerFactory B\", color=:lightgray, linewidth=5)\nplot!(sol.t, b.*sqrt(3/2); label=\"u_2_b\")\n\nplot!(df.t, df.u_2_c; label=\"PowerFactory C\", color=:lightgray, linewidth=5)\nplot!(sol.t, c.*sqrt(3/2); label=\"u_2_c\")","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"In this graph, the PowerFactory solution is light gray and thick behind our solution.","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"... lets have a closer look","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"xlims!(0.0995,0.105)","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"","category":"page"},{"location":"generated/slack_load/","page":"slack_load","title":"slack_load","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = EMTSim","category":"page"},{"location":"#EMTSim","page":"Home","title":"EMTSim","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for EMTSim.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [EMTSim]","category":"page"},{"location":"#NetworkDynamics.ODEEdge","page":"Home","title":"NetworkDynamics.ODEEdge","text":"Conventions: (Anti-)symmetric lines:\n\ninputs:   u_d_src, u_q_src, u_d_dst, u_q_dst\noutputs:  i_d, i_q\ncurrent direction is defined from src to dst\ndst node will receive -i_d, -i_q\n\nAsymmetric lines:\n\ninputs:   u_d_src, u_q_src, u_d_dst, u_q_dst\noutputs:  i_d_src, i_q_src, i_d_dst, i_q_dst\nnot yet implemented. might by tricky with fidutial...\n\n\n\n\n\n","category":"type"},{"location":"#EMTSim.subscript-Union{Tuple{T}, Tuple{T, Int64}} where T<:Union{AbstractString, Symbol}","page":"Home","title":"EMTSim.subscript","text":"subscript(s, i)\n\nAppend symbol or string s with a integer subscript.\n\n\n\n\n\n","category":"method"}]
}
